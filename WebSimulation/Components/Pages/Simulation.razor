@page "/"
@rendermode InteractiveServer
@using raft_garioncox
@using raft_garioncox.Records

<PageTitle>Home</PageTitle>

<h1>RAFT Sim</h1>
<p>Garion Cox</p>

<hr>

<form @onsubmit="HandleSendCommand">
    <div class="form-group pt-2">
        <label for="nodeSelect">Node</label>
        <select id="nodeSelect" class="form-select" @bind=SelectedNode>
            <option value="0">Node 0</option>
            <option value="1">Node 1</option>
            <option value="2">Node 2</option>
        </select>
    </div>
    <div class="form-group pt-2">
        <label for="commandInput">Command</label>
        <input id="commandInput" class="form-control" maxlength="10" @bind=Command>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Send</button>

    <p class="mt-3 text-decoration-underline">CommandList</p>
    @foreach (string command in simClient.CommittedRequests.Keys)
    {
        <p>@command : @simClient.CommittedRequests[command]</p>
    }
</form>

<hr>

<div class="row p-3 col-4">
    <label for="NetworkDelay" class="form-label">Network Delay: @NetworkDelay</label>
    <input type="range" class="form-range" id="NetworkDelay" value=0 @onchange='HandleNetworkDelayChange'>

    <label for="TimeoutMultiplier" class="form-label">Timeout Multiplier: @TimeoutMultiplier</label>
    <input type="range" class="form-range" min=10 max=100 value=10 id="TimeoutMultiplier"
        @onchange='HandleTimeoutMultiplierChange'>
</div>

<button @onclick="Start" class="btn btn-primary">Start</button>
<button @onclick="Stop" class="btn btn-danger">Stop</button>

<hr>

<div class="row p-3 col-12">
    @foreach (var n in nodes)
    {
        var timeoutRemaining = n.ElectionTimeout;
        var maxIntervalMilliseconds = n.State == NODESTATE.LEADER ? 50.0 * TimeoutMultiplier : 300.0 * TimeoutMultiplier;
        var percentageRemaining = (int)(100 * (Math.Abs(n.ElectionTimeout) / maxIntervalMilliseconds));
        <div class="col border p-3 m-2 rounded-3">
            <div class="d-flex flex-row">
                <h2>Node @n.Id</h2>
                @if (n.IsPaused)
                {
                    <button class="btn btn-outline-success ms-auto" @onclick="n.Unpause">resume</button>
                }
                else
                {
                    <button class="btn btn-outline-danger ms-auto" @onclick="n.Pause">pause</button>
                }
            </div>
            <div class="d-flex flex-column">
                <div>@(n.State)</div>
                <div>Term @n.Term</div>
                <div>Following: @((n.CurrentLeader != null) ? n.CurrentLeader : "No leader")</div>
            </div>
            <div>
                @n.ElectionTimeout ms
                <div class="progress" role="progressbar" aria-label="Basic example"
                    aria-valuenow="@(Math.Abs(timeoutRemaining))" aria-valuemin="0"
                    aria-valuemax="@(maxIntervalMilliseconds)">
                    <div class="progress-bar bg-@(n.State == NODESTATE.LEADER ? "danger" : "success")"
                        style="width: @percentageRemaining%;"></div>
                </div>
            </div>

            <div>State: @n.LogState</div>
            <div>Commit Index: @n.CommittedLogIndex</div>


            <div className="pt-5">
                @if (n.Entries.Count > 0)
                {
                    @for (int i = 0; i < n.Entries.Count; i++)
                    {
                        <div>#@i [T@(n.Entries[i].Term)] @(n.Entries[i].Value) @(n.CommittedLogIndex >= i ? "committed" : "")</div>
                    }
                }
                else
                {
                    <div>No entries</div>
                }
            </div>
        </div>
    }
</div>

@code {
    List<SimNode> nodes = [];
    int TimeoutMultiplier = 10;
    int NetworkDelay = 0;
    public required Timer timer;
    public string Command = "";
    public string SelectedNode { get; set; } = "0";
    public SimClient simClient = new(0);

    protected override void OnInitialized()
    {
        var node1 = new Node() { Id = 0 };
        var node2 = new Node() { Id = 1 };
        var node3 = new Node() { Id = 2 };

        var sim1 = new SimNode(node1);
        var sim2 = new SimNode(node2);
        var sim3 = new SimNode(node3);

        sim1.Neighbors = new Dictionary<int, INode>() { { sim2.Id, sim2 }, { sim3.Id, sim3 } };
        sim2.Neighbors = new Dictionary<int, INode>() { { sim1.Id, sim1 }, { sim3.Id, sim3 } };
        sim3.Neighbors = new Dictionary<int, INode>() { { sim1.Id, sim1 }, { sim2.Id, sim2 } };

        sim1.IntervalScalar = TimeoutMultiplier;
        sim2.IntervalScalar = TimeoutMultiplier;
        sim3.IntervalScalar = TimeoutMultiplier;

        sim1.ResetElectionTimeout();
        sim2.ResetElectionTimeout();
        sim3.ResetElectionTimeout();

        nodes = [sim1, sim2, sim3];
        StateHasChanged();

        timer = new(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    public void Start()
    {
        foreach (INode node in nodes)
        {
            node.Run();
        }
    }

    public void Stop()
    {
        foreach (INode node in nodes)
        {
            node.Stop();
        }
    }

    public void HandleNetworkDelayChange(ChangeEventArgs e)
    {
        int delay = Convert.ToInt32(e.Value);
        NetworkDelay = delay;
        foreach (SimNode node in nodes)
        {
            node.NetworkDelay = delay;
        }
        StateHasChanged();
    }

    public void HandleTimeoutMultiplierChange(ChangeEventArgs e)
    {
        int multiplier = Convert.ToInt32(e.Value);
        TimeoutMultiplier = multiplier;
        foreach (SimNode node in nodes)
        {
            node.IntervalScalar = multiplier;
            node.ResetElectionTimeout(node.State == NODESTATE.LEADER);
        }
        StateHasChanged();
    }

    public void HandleSendCommand()
    {
        int nodeId = int.Parse(SelectedNode);
        simClient.AddCommand(Command);
        nodes[nodeId].ReceiveCommand(new ClientCommandDTO(simClient, Command));
    }
}